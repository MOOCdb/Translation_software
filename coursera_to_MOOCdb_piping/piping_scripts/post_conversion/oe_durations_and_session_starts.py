from ..utilities import dbfrom ..observations import InsertObservedEventsimport datetimedef AddOEDurationsAndSessionStarts(vars):    vars['logger'].Log(vars, "\tAdding observed event durations and activity start events")        t = vars['target']    sel = db.Selector(t['host'], t['user'], t['password'], t['port'], t['db'])    activity_start_oetid = sel.query("SELECT * FROM observed_event_types WHERE observed_event_type_name='activity_start'")[0]['observed_event_type_id']        # Delete all existing session_start records    db.Execute(sel.cur, "DELETE FROM observed_events WHERE observed_event_type_id={}".format(activity_start_oetid))        # Get user IDs    rows = sel.query("SELECT user_id FROM users ORDER BY user_id")    user_ids = [r['user_id'] for r in rows]        # Set durations for each user    ui = 0    for user_id in user_ids:        ui += 1        if ui%1000 == 0:            vars['logger'].Log(vars, "\t\tCompleted user {}/{}".format(ui, len(user_ids)))                    # Read the student's observed events        rows = sel.query("SELECT oe.observed_event_id AS id, oe.observed_event_timestamp AS ts, oet.observed_event_type_activity_mode AS am FROM observed_events AS oe JOIN observed_event_types AS oet ON oe.observed_event_type_id=oet.observed_event_type_id WHERE user_id={} ORDER BY ts".format(user_id))        activity_start_events = []        update_durations = []        for ri in range(len(rows)):            if rows[ri]['am'] == 'passive':                if ri < len(rows)-1 and (rows[ri+1]['ts']-rows[ri]['ts']).seconds <= 45*60:                    duration = (rows[ri+1]['ts']-rows[ri]['ts']).seconds                else:                    duration = 500            else:                if ri == 0 or (ri > 0 and (rows[ri]['ts'] - rows[ri-1]['ts']).seconds > 45*60):                    duration = 300                elif ri > 0 and (rows[ri]['ts'] - rows[ri-1]['ts']).seconds <= 45*60 and rows[ri-1]['am'] == 'active':                    duration = (rows[ri]['ts'] - rows[ri-1]['ts']).seconds                else:                    duration = None                            if duration != None:                update_durations.append({'id': rows[ri]['id'], 'duration': duration})                        if ri == 0 or (rows[ri]['ts']-rows[ri-1]['ts']).seconds > 45*60:                activity_start_events.append({'observed_event_type_id': activity_start_oetid, 'user_id': user_id, 'observed_event_timestamp': rows[ri]['ts']-datetime.timedelta(0,1), 'observed_event_data': {}, 'item_id': -1})                        if len(rows) > 0:            for u in update_durations:                dur_update_query = "UPDATE observed_events SET observed_event_duration={} WHERE observed_event_id={}".format(u['duration'], u['id'])                db.Execute(sel.cur, dur_update_query)                # Insert session start events        #if len(activity_start_events) > 0:            #InsertObservedEvents(vars, activity_start_events)