def GetResourceList(vars):    org = vars['source']['course_org']    id1 = vars['source']['course_id_1']    id2 = vars['source']['course_id_2']        db = vars['cons']['modulestore']    coll = db['modulestore']    resource_tree = GetNodeAndChildren(coll, {"_id.org": org, "_id.course": id1, "_id.category": "course", "_id.name": id2})    #PrintNodeAndChildren(resource_tree,0)        resource_list = ListNodeAndChildren(resource_tree)    return resource_list # We return the list rather than the tree since it is easier to iterate ondef GetNodeAndChildren(coll, node_query_params):    nodes = coll.find(node_query_params)    n_nodes = nodes.count()    #if nodes.count() > 1:        #raise Exception("Multiple nodes founds for query with params {}. Only one node expected.".format(node_query_params))        node = nodes[n_nodes-1]    if 'children' not in node['definition'].keys():        return node            node['children_nodes'] = []    for child_id in node['definition']['children']:        split1 = child_id.split("://")        tag = split1[0]        split2 = split1[1].split("/")        org = split2[0]        course = split2[1]        category = split2[2]        name = split2[3]                child_query_params = {"_id.org": org, "_id.course": course, "_id.category": category, "_id.name": name}        node['children_nodes'].append(GetNodeAndChildren(coll, child_query_params))            return node    def ListNodeAndChildren(node):    output = [node]    if "children_nodes" in node.keys():        for child in node["children_nodes"]:            output.extend(ListNodeAndChildren(child))                return output    def PrintNodeAndChildren(node, indent_level):    nid = node["_id"]    print "".join(["\t" for i in range(indent_level)]) + "{}/{}".format(nid["category"], nid["name"])    if "children_nodes" in node.keys():        for child in node["children_nodes"]:            PrintNodeAndChildren(child, indent_level + 1)